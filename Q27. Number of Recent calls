Question -> https://leetcode.com/problems/number-of-recent-calls/description/?envType=study-plan-v2&envId=leetcode-75

Solution:

class RecentCounter {
    // // Sliding Window Technique
    // // Creating a list which will contain the time, and we will check if time at j - time at i <= 3000
    // // if it is then the number of counters must be ++;
    // // else reduce the window i.e., slide it from the left towards right
    // List<Integer> list;
    // int i;
    // int j;
    // public RecentCounter() {
    //     list = new ArrayList<>();
    //     i = 0;
    //     j = -1;
    // }
    
    // public int ping(int t) {
    //     list.add(t);
    //     j++;
    //     while(i<j && list.get(j) - 3000 > list.get(i)){
    //         i++;
    //     }
    //     return j - i + 1;
    // }


    // Implementing using Queue
    Queue<Integer> queue;

    public RecentCounter() {
        // using java collections framework for implementing queue
        queue = new LinkedList();
    }

    public int ping(int t){
        queue.add(t);

        while(!queue.isEmpty() && t - 3000 > queue.peek()){
            queue.poll(); //removing element 
        }
        return queue.size();
    }
}

/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter obj = new RecentCounter();
 * int param_1 = obj.ping(t);
 */
