Question -> https://leetcode.com/problems/container-with-most-water/description/?envType=study-plan-v2&envId=leetcode-75

Solution:

class Solution {
    public int maxArea(int[] height) {
        // // Brute Force Approach
        // // TC = O(n*n)
        // int area = 0;
        // for(int i=0; i<height.length; i++){
        //     for(int j=i+1; j<height.length; j++){
        //         int min = Math.min(height[i], height[j]);
        //         area = Math.max(area, min * (j - i));
        //     }
        // }
        // return area;

        // Optimal Approach
        // TC = O(n)
        int left = 0;
        int right = height.length-1;
        int area = 0;
        while(left < right){
            int min = Math.min(height[left], height[right]);
            area = Math.max(area, min * (right - left));
            if(height[left] < height[right]){
                left++;
            }
            else{
                right--;
            }
        }
        return area;
    }
}
