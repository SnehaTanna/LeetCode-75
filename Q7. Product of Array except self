Question -> https://leetcode.com/problems/product-of-array-except-self/description/?envType=study-plan-v2&envId=leetcode-75

Solution:

class Solution {
    public int[] productExceptSelf(int[] nums) {
        // // Time Complexity -> O(n*n);
        // int[] product = new int[nums.length];
        // for(int i=0; i<nums.length; i++){
        //     int temp = 1;
        //     for(int j=0; j<nums.length; j++){
        //         if(i == j){
        //             continue;
        //         }
        //         else{
        //             temp *= nums[j];
        //         }
        //     }
        //     product[i] = temp;
        // }
        // return product;

        // Using Prefix & Suffix Product 

        // // Time Complexity = O(n)

        // // Here Space Complexity is also O(n) excluding the product array

        // int n = nums.length;
        // int[] prefix = new int[n];
        // int[] suffix = new int[n];
        // prefix[0] = 1;
        // suffix[n-1] = 1;

        // for(int i=1; i<n; i++){
        //     prefix[i] = prefix[i-1] * nums[i-1]; //nums[i-1] because we do not want that number to be included in product
        // }

        // for(int i=n-2; i>=0; i--){
        //     suffix[i] = suffix[i+1] * nums[i+1];
        // }

        // int product[] = new int[n];
        // for(int i=0; i<n; i++){
        //     product[i] = prefix[i] * suffix[i];
        // }

        // return product;

        // Space Complexity will be O(1) excluding the product array
        // without using Suffix and Prefix arrays and directly using product array

        int n = nums.length;
        int[] product = new int[n];

        Arrays.fill(product, 1);

        int prefix = 1;
        for(int i=0; i<n; i++){
            product[i] *= prefix;
            prefix *= nums[i];
        }

        int suffix = 1;
        for(int i=n-1; i>=0; i--){
            product[i] *= suffix;
            suffix *= nums[i];
        }
        return product;

    }
}
