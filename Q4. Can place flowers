Question -> https://leetcode.com/problems/can-place-flowers/description/?envType=study-plan-v2&envId=leetcode-75

Solution: 

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        if (n == 0) {
            return true;
        }

        // Handle special case of a single element
        if (flowerbed.length == 1) {
            return n == 1 && flowerbed[0] == 0;
        }

        // Check the first element
        if (flowerbed[0] == 0 && flowerbed[1] == 0) {
            flowerbed[0] = 1;
            n--;
            if (n == 0) return true;
        }

        // Check the middle elements
        for (int i = 1; i < flowerbed.length - 1; i++) {
            if (flowerbed[i - 1] != 1 && flowerbed[i + 1] != 1 && flowerbed[i] != 1) {
                flowerbed[i] = 1;
                n--;
                if (n == 0) return true;
            }
        }

        // Check the last element
        if (flowerbed[flowerbed.length - 1] == 0 && flowerbed[flowerbed.length - 2] == 0) {
            flowerbed[flowerbed.length - 1] = 1;
            n--;
            if (n == 0) return true;
        }

        return n == 0;

        // Time Complexity = O(n)
    }
}
