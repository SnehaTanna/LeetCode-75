Question -> https://leetcode.com/problems/max-consecutive-ones-iii/?envType=study-plan-v2&envId=leetcode-75

Solution:

class Solution {
    public int longestOnes(int[] nums, int k) {
        // // Brute Force approach -> Calculating the 0's present in every possible subarray and updating the max if neessary
        // // TC = O(n^3)
        // int max = 0;
        // // Starting point of subarrays
        // for(int i=0; i<nums.length; i++){
        //     // ending point of subarrays
        //     for(int j=i; j<nums.length; j++){
        //         int count = 0;
        //         // counting the number of 0's in a subarray
        //         for(int l=i; l<=j; l++){
        //             if(nums[l] == 0){
        //                 count++;
        //             }
        //         }
        //         if(count <= k){
        //             max = Math.max(max, j-i+1);
        //         }
        //     }
        // }
        // return max;

        // Optimal Approach using sliding window
        // TC = O(n)
        int left = 0, right = 0, max = 0, count = 0;
        while(right < nums.length){
            // Expanding the window
            if(nums[right] == 0){
                count++;
            }
            // Shrinking the window
            while(count > k){
                if(nums[left] == 0){
                    count--;
                }
                left++;
            }
            max = Math.max(max, right-left+1);
            right++;
        }
        return max;
    }
}
